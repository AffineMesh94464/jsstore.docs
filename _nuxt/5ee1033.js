(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{233:function(e,n,t){"use strict";t.r(n);var o={components:{Layout:t(172).a}},r=t(14),component=Object(r.a)(o,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("Layout",{attrs:{title:"Update Schema",description:"how to update db schema after database is created",keywords:"change, update, schema, database, indexeddb",contentSrc:"/home/travis/build/ujjwalguptaofficial/jsstore.docs/out/content/tutorial/update-schema.md"}},[t("p",[e._v("database schema can be updated by incrementing the version in database object.")]),e._v(" "),t("h4",{attrs:{id:"example"}},[e._v("Example")]),e._v(" "),t("pre",[t("code",[e._v('var db = {\n    name: "db_name",\n    tables:[],\n    version: 2 //Default version is 1.\n}\n')])]),e._v(" "),t("h2",{attrs:{id:"howtogetcurrentdbversion"}},[e._v("How to get current db version")]),e._v(" "),t("p",[e._v("you can find your current db version in indexedDb section of browser development tools.")]),e._v(" "),t("p",[t("img",{staticStyle:{"max-width":"100%"},attrs:{src:"/img/version_screenshot.png"}})]),e._v(" "),t("h2",{attrs:{id:"whatistheneedofdbversion"}},[e._v("What is the need of db version")]),e._v(" "),t("p",[t("br"),e._v("\nIndexedDb is a database technology for browser which means if you do some changes in your web application , any one who use your web app should get latest changes including database changes. ")]),e._v(" "),t("p",[e._v("Browser decides to change db schema when indexedb is initiated with db version greater than current db version.")]),e._v(" "),t("h2",{attrs:{id:"whathappenstodatawhenschemaischanged"}},[e._v("What happens to data when schema is changed")]),e._v(" "),t("p",[e._v("All table except one with "),t("code",[e._v("upgrade")]),e._v(" value false are recreated and thus all data in receated table is deleted. ")]),e._v(" "),t("p",[e._v("So upgrade can be used to preserve the data inside table.")]),e._v(" "),t("pre",[t("code",[e._v("var tblProduct = {\n    name: 'Product',\n    columns: {\n        id:{ primaryKey: true, autoIncrement: true },\n    },\n    upgrade:false // do not change schema of this table\n};\n\nvar db = {\n    name: \"db_name\",\n    tables:[],\n    version: 2 //Default version is 1.\n}\n")])]),e._v(" "),t("h3",{attrs:{id:"howdoipreservemydatafortablewhichhasschemachanges"}},[e._v("How do i preserve my data for table which has schema changes")]),e._v(" "),t("p",[e._v("Before calling "),t("code",[e._v("initDb")]),e._v(" api with new db schema changes, select all data from a table and then insert it after the connection is initiated.")]),e._v(" "),t("p",[e._v("e.g - ")]),e._v(" "),t("pre",[t("code",[e._v("async function changeDbSchema() {\n    var allData = await connection.select({\n        from:`{tableName}`\n    });\n\n    var isDbCreated = await connection.initDb(newDbSchema);\n    if(isDbCreated){\n        await connection.insert({\n            into:`{tableName}`,\n            values: allData\n        })\n    }\n}\n\n// should be called after connection is initiated with old schema\nchangeDbSchema();\n")])])])}),[],!1,null,null,null);n.default=component.exports}}]);