(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{217:function(e,n,t){"use strict";t.r(n);var r={components:{Layout:t(172).a}},d=t(14),component=Object(d.a)(r,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("Layout",{attrs:{title:"Middleware",description:"Middleware can be used to modify queries",keywords:"middleware, plugin, indexeddb, jsstore",contentSrc:"/home/travis/build/ujjwalguptaofficial/jsstore.docs/out/content/tutorial/middleware.md"}},[t("div",{staticClass:"highlight"},[e._v("\nMiddleware is a function which has access to request and next callback.They are called for each request in the same order as defined.\n")]),e._v(" "),t("p",[t("br")]),e._v(" "),t("p",[e._v("Middleware can be used to listen to each query and modify if necessary.")]),e._v(" "),t("p",[e._v("e.g - Let's say i want to encode my data when being inserted to make sure its not readable or for security purpose.")]),e._v(" "),t("h2",{attrs:{id:"createmiddleware"}},[e._v("Create Middleware")]),e._v(" "),t("pre",[t("code",[e._v("var connection = new JsStore.Connection();\nconnection.addMiddleware(function (request, next) {\n    // request.name is name of api\n\n    if(request.name=='insert'){\n        // request.query is query supplied in each api\n\n        encodeData(request.query)\n    }\n\n    // next is required to call to handle control to next middleware\n\n    next();\n});\n")])]),e._v(" "),t("p",[e._v("now middleware is registered and can be used. Let's call a insert api")]),e._v(" "),t("pre",[t("code",[e._v("connection.insert({\n    into:\"my_secure_table\"\n    values:[{\n        password:'12345'\n    }],\n    // some extra information can be provided\n    encryption:'md5'\n})\n")])]),e._v(" "),t("p",[e._v("Middleware can be also created and provided as package using "),t("a",{attrs:{href:"/tutorial/plugin"}},[e._v("plugin")]),e._v(".")])])}),[],!1,null,null,null);n.default=component.exports}}]);