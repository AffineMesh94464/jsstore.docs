(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{215:function(n,e,t){"use strict";t.r(e);var o={components:{Layout:t(172).a}},c=t(14),component=Object(c.a)(o,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("Layout",{attrs:{title:"Plugin",description:"Plugin can be used to write common set of generic codes",keywords:"plugin, middleware, indexeddb, jsstore",contentSrc:"/home/travis/build/ujjwalguptaofficial/jsstore.docs/out/content/tutorial/plugin.md"}},[t("p",[n._v("Plugin can be used to write common set of generic codes which can be provided to anyone using a package. Using plugin you can inject apis or insert middleware.")]),n._v(" "),t("p",[t("a",{attrs:{href:"/tutorial/sqlweb"}},[n._v("SqlWeb")]),n._v(" is an example of plugin which add "),t("code",[n._v("$sql")]),n._v(" api.")]),n._v(" "),t("h2",{attrs:{id:"howtocreateaplugin"}},[n._v("How to create a plugin")]),n._v(" "),t("pre",[t("code",[n._v('export const AwesomePlugin = {\n\n    // setup is called by jsstore, so all initialization should happen here\n    setup: function(connection, params){\n\n        connection.myApi = {\n            insertIntoMyTable: function (data){\n                connetion.insert({\n                    into:"my_table",\n                    values:[data]\n                })\n            }\n        }\n\n    }\n}\n')])]),n._v(" "),t("p",[n._v("In the above code we have created a plugin which add api "),t("code",[n._v("myApi")]),n._v(" to insert data into specific table.")]),n._v(" "),t("p",[n._v("Now we need to add this plugin to jsstore connection.")]),n._v(" "),t("pre",[t("code",[n._v("var connection = new JsStore.Connection();\nconnection.addPlugin(AwesomePlugin);\n")])]),n._v(" "),t("p",[n._v("now plugin is installed and can be used. Let's use the api added by plugin")]),n._v(" "),t("pre",[t("code",[n._v("connection.insertIntoMyTable({\n    name:'ujjwal gupta'\n})\n")])])])}),[],!1,null,null,null);e.default=component.exports}}]);