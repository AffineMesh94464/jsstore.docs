(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{203:function(e,n,t){"use strict";t.r(n);var o={components:{Layout:t(175).a}},r=t(14),component=Object(r.a)(o,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("Layout",{attrs:{title:"Multi Entry",description:"MultiEntry allows you to query array value in a column.",keywords:"multi entry, option, column, indexeddb, jsstore",contentSrc:"/home/runner/work/jsstore.docs/jsstore.docs/content/tutorial/multi-entry.md"}},[t("p",[e._v("consider these values in a table")]),e._v(" "),t("pre",[t("code",[e._v('var values = [\n    {\n        name: "Ray",\n        tags: ["apple", "banana", "beer"]\n    },\n    {\n        name: "Scott",\n        tags: ["beer"]\n    }, \n    {\n        name: "Marc",\n        tags: ["mongo", "jenkins","jsstore"]\n    }\n];\n')])]),e._v(" "),t("p",[e._v("now you want to fetch records whose tags is 'mongo'. So a simple select query will be - ")]),e._v(" "),t("pre",[t("code",[e._v("const results = await connection.select({\n    from: 'people',\n    where: {\n        tags: 'mongo'\n    }\n});\n")])]),e._v(" "),t("p",[e._v("Here results will be always empty array, because indexeddb does not know anything about 'mongo' since it has stored an array value.")]),e._v(" "),t("p",[e._v("In order to solve this problem - IndexedDb provides an option 'multi entry'.")]),e._v(" "),t("div",{staticClass:"highlight"},[e._v("\nMultiEntry lets you search inside a column with array values. MultiEntry creates index for each item in array value.\n")]),e._v(" "),t("p",[t("br"),e._v("In this case - you will have to enable "),t("code",[e._v("multiEntry")]),e._v(' option for column "tags".')]),e._v(" "),t("p",[e._v("Here is an example database schema -")]),e._v(" "),t("pre",[t("code",[e._v("var people = {\n    name: 'people',\n    columns: {\n        name: {\n            unique: true,\n            dataType: JsStore.DATA_TYPE.String\n        },\n        tags: {\n            dataType: JsStore.DATA_TYPE.Array,\n            multiEntry: true\n        }\n    }\n};\n\nvar dataBase = {\n    name: 'MultiEntryTest',\n    tables: [people]\n};\n")])]),e._v(" "),t("p",[t("strong",[e._v("Note :-")]),e._v(" "),t("code",[e._v("multiEntry")]),e._v(" will only work for plain values i.e string, number but not for compound types like json data or array. Because indexedDb provides one level indexing only.")])])}),[],!1,null,null,null);n.default=component.exports}}]);